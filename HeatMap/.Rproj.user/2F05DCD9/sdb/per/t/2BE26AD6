{
    "collab_server" : "",
    "contents" : "mset <- read.csv(\"~/mset.csv\", na.strings= c(\"\",NA))\nlibrary(\"RColorBrewer\")\nlibrary(plotly)\nlibrary(stringr)\nlibrary(\"fields\")\nlibrary(\"ggplot2\")\nlibrary(\"lattice\")\n\n#data cleaning\n#get it in the proper form for the rest of the model\n\n#only retrieve displastic rows\n\n#mset <- mset[grep(\"yes\",mset$high_grade),]\n\n#only retrieve non-displastic rows\n#mset <- mset[which(is.na(mset$high_grade)),]\n\n\n\n#only retrieve rows with tissue age\nmset <- mset[c(grep(\"[0-9]\",mset$tissue_age)),]\n\n#removes samples that are normal from data frame or any other bad string\n#mset <- mset[-c(grep(\"normal\",mset$Sample.Clinical.Pathology)),]\n\n\nclean <- mset$Tissue_location\n\n#better dat contains all the values with length or centimeter data\nbetter_dat <- mset[grep(\"cm\", clean),]\nclocker <- lapply(better_dat$Tissue_location,FUN = function(x) gsub(\".+cm\",\"\",x))\n\n\n#age\njunction <- better_dat[19]\nGEJ <- c(as.numeric(unlist(junction)))\n\n#distone and disttwo are both \ndistone <- lapply(better_dat$Tissue_location, FUN = function(x) gsub(\"cm.+\",\"\",x))\ndisttwo <- c(as.numeric(lapply(distone, FUN = function(x) gsub(\"[^0-9]\",\"\",x))))\n#I'm making it absolute value for now the values should not be negative\ndif <- GEJ - disttwo\n\n\nclock <- c(unlist(clocker))\n#replace 5:00 with 6:00 and organizes data into data frame\n\n\nclock <- gsub(\"5:00\", \"6:00\",clock)\ndist <- c(dif)\n#age is age of tissue\n#age <- c(floor(rexp(length(dif))*50))\n#age <- c(seq(1:length(dif)))\nonset <- mset$tissue_age\nage <- mset$Age\ndwell <- age -onset\n\ndf <- data.frame(clock,dist,dwell)\nnames(df) <- c(\"clock\",\"dist\",\"age\")\n\n\n\n#all the rows with clock info\n#get methylation info\n\n#clock_rows picks out all the indices with clock location\n#X_coord and y_coord are justin the cases where there is clock data\nclock_rows = grep(\":\", df$clock)\n\n#puts clock levels in right order ie 12:00 -> 4 9:00 -> 3 etc\ncheck <- factor(df[clock_rows, ]$clock)\nlevels(check) <- c(4,1,2,3)\nx_coord = as.numeric(levels(check))[check]\n\n#these are the y coordinates at least from R console\ny_coord = as.numeric(df[clock_rows, ]$dist)\nmether = as.numeric(df[clock_rows, ]$age)\nesoph = matrix(rep(0,len=80), nrow = 20, ncol= 4)\nweight = matrix(rep(0,len=80), nrow=20,ncol=4)\n\n\n#adds position and heat data to esoph diagram \nfor(vale in 1:length(x_coord)){\n  \n  #print(mether[vale])\n  esoph[y_coord[vale],x_coord[vale]] = esoph[y_coord[vale],x_coord[vale]]+ mether[vale]\n  weight[y_coord[vale],x_coord[vale]] =  weight[y_coord[vale],x_coord[vale]]+1\n}\nplot_ly(z=esoph, type=\"heatmap\")\n\nheatmap(weight)\n\n# for loops adds data for biopsises without clock data\ny_coord_no = as.numeric(df[-c(grep(\":\", df$clock)), ]$dist  )\nmeth_value = as.numeric(df[-c(grep(\":\", df$clock)), ]$age)\nfor(index in 1:length(y_coord_no)){\n  # add .25 times val\n  print(index)\n  esoph[y_coord_no[index],]=  esoph[y_coord_no[index],] + meth_value[index]*.25\n  weight[y_coord_no[index],]= weight[y_coord_no[index],] +.25\n}\n\n#computes weighted averages by dividing the sum of ages by the sum of weights in the weight matrix \nbest_matrix <- esoph*weight^-1\nbest_matrix\n#makes 2D heatplot \nplot_ly(z=best_matrix,x= c(\"3:00\",\"6:00\",\"9:00\",\"12:00\"), type=\"heatmap\")\n\nheatmap(na.omit(best_matrix))\n\n#secondary plot to make smooth grap of data\n#retireves the coordinates and z values of the parts of the matrix without NAs\n\n#making copies for boundary\n\npos = which(!is.na(best_matrix),TRUE)\n\nleft  <-  pos\nleft[,2] = left[,2]-4 \n\nright <-  pos\nright[,2] = right[,2] +4\n\n#remove above\nPBCpos = rbind(pos,right,left)\nPBCpos_2 = PBCpos[,c(2,1)]\n\n\n#last ditch\n#x <- pos[,1]\n#y <- pos[,2]\n#pos_new = cbind(y,x)\n\npre_val = as.vector(best_matrix)\nz_index = which(!is.na(pre_val), TRUE)\n\nz_val <- pre_val[z_index]\n\nrorm_mat = matrix(z_val,ncol = 1)\n\nPBCz = rbind(rorm_mat,rorm_mat,rorm_mat)\n#test matrix\n\nbest_fit <- Tps(PBCpos_2,PBCz,cost= 1.4)\n\ngrid.list<- list( x= seq(0,4,.1), y=seq(0,12,.1))   #Note - these ranges will need to be changed for your needs\nxg<- make.surface.grid(grid.list)\n\n#plotting function - modify as needed, including changing zlim to cover the range of y-values \ndev.off()\ndev.new()\nf1<- predict( best_fit, xg)\nout.p<- as.surface( xg, f1)\nbest_plot = plot.surface(out.p,zlim=c(14,35),xlab='clock position',ylab='length in (cm) from GEJ',main='Esophagus',cex.main=1.3,cex.lab=1.3,cex.axis = .75, xaxt = 'n',col = myPal)\nbest_plot\naxis(side=1,at = c(1,2,3,4),labels = c(\"3:00\",\"6:00\",\"9:00\",\"12:00\"))\n#the code below deals with plotting points on the graph\n\n#high_clock contains high grade biopsy where \np_clock <-  mset[grep(\":\",mset$Tissue_location),]\nhigh_clock_index <- grep(\"yes\",p_clock$high_grade)\n# index of nondisplastic tissue with clock\nnondist_index <- setdiff(seq(1:length(high_clock_index)), high_clock_index)      #which(is.na(p_clock$high_grade))\n\n#highclock_tissue <- p_clock[high_clock]$tissue_age\n\n\n\n#plot points that don't have clocks and are nondisplastic\n#no_clock <- mset_2[grep(\"[^:]*\", mset_2$Tissue_location),]\nclock_index <- grep(\":\",  mset$Tissue_location)\n#no_clock <- mset_2[setdiff(seq(1:length(mset_2$Tissue_location)),clock_index),]\nno_clock <- mset[-c(clock_index),]\nlow_clock_index = which(is.na(no_clock$high_grade))\n#lowclock_index <- grep(\"[^y]\",no_clock$high_grade) \nhigh_no_index <- grep(\"y\",no_clock$high_grade)\nhigh_no_clock <- y_coord_no[high_no_index]\nlow_no_clock <- y_coord_no[low_clock_index]\n\n\n#tissue age for displastic tissue with clock\nhighclock_tissue <- p_clock[high_clock_index,]$Age -  p_clock[high_clock_index,]$tissue_age\n\n#create colors \n#color is based on displastic tissue age\nmyPal <- colorRampPalette(c(\"darkblue\", \"blue\", \"cyan\", \"green\", \"yellow\", \"orange\", \"darkorange\", \"red\",\"darkred\"))(200) \ncolor_val <- myPal[findInterval( highclock_tissue, seq( 14, 35, length.out= 200), rightmost.closed= T ) ]\n\ncolor_val <- myPal(200)[as.numeric(highclock_tissue)]\n#points for displastic without clock\npoints(runif(length(high_no_clock),0,4), high_no_clock, pch = \"X\",col = \"blue\")\n\n#points for nondisplastic without clock \npoints(runif(length(low_no_clock),0,4),low_no_clock, pch = \"X\", col = \"white\")\n\n\n#plot the nondisplastic points with clock values\npoints(x_coord[nondist_index],y_coord[nondist_index],pch=\"X\",cex = 1.3)\n\n#plot the displastic points with clock values\npoints(x_coord[high_clock_index], y_coord[high_clock_index],pch=20,col = color_val ,cex = 3)\npoints(x_coord[high_clock_index], y_coord[high_clock_index],pch=1,cex = 2,lwd = 2)\n\n#more plots of data for fun \n#wireframe(best_matrix ,colorkey = TRUE)\n#plot_ly(z=best_matrix, type=\"surface\",x= c(\"3:00\",\"6:00\",\"9:00\",\"12:00\"))\n#plot_ly(z=best_matrix, type = \"contour\",x= c(\"3:00\",\"6:00\",\"9:00\",\"12:00\"))\n\n\n#retrieve samples by person\n#all the rows with a particular id ie 498\n#x<- split(new_pdat_072816, new_pdat_072816$Patient_ID)\n#typeof(x[\"498\"])\n#x[\"498\"][[1]]$Sample_Name\n\n# heatmap of data without high grade\n\n\n",
    "created" : 1469741421144.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "832981709",
    "id" : "2BE26AD6",
    "lastKnownWriteTime" : 1470442048,
    "last_content_update" : 1470442048043,
    "path" : "~/HeatMap/heating.R",
    "project_path" : "heating.R",
    "properties" : {
        "docOutlineVisible" : "0",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}